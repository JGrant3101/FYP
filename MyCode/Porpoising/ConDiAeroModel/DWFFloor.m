% Creating a floor downforce function based on geometry and airflow as
% opposed to just a numerical approximation
clear all
close all
clc

%% Defining the floor geometry
% Start by defining the floor length and width
FloorLength = 3;
FloorWidth = 1.5;

% Create an array of floor distances based on the floor length
FloorArray = linspace(0, FloorLength, 30001)';

% Start by defining static front and rear ride heights
StaticRRH = 0.11;
FloorAngle = 0.25;
StaticFRH = StaticRRH - FloorLength * sind(FloorAngle);
%StaticFRH = 0.0943;


% Defining the x and y for the low point of the floor
Xlow = 1.7;
Ylow = 0.08;
% Will form a quadratic defining the floor profile
temp1 = zeros([4, 4]);
temp2 = zeros([4, 1]);


% Lowering the floor here while working on code
StaticFRH = StaticFRH - 0.07;
StaticRRH = StaticRRH - 0.07;
Ylow = Ylow - 0.07;

temp1(1, 4) = 1;
temp1(2, 1) = FloorLength^3;
temp1(2, 2) = FloorLength^2;
temp1(2, 3) = FloorLength;
temp1(2, 4) = 1;
temp1(3, 1) = Xlow^3;
temp1(3, 2) = Xlow^2;
temp1(3, 3) = Xlow;
temp1(3, 4) = 1;
temp1(4, 1) = 3 * Xlow^2;
temp1(4, 2) = 2 * Xlow;
temp1(4, 3) = 1;

temp2(1) = StaticFRH;
temp2(2) = StaticRRH;
temp2(3) = Ylow;
temp2(4) = 0;

% Solving
values = linsolve(temp1, temp2);
a = values(1);
b = values(2);
c = values(3);
d = values(4);

% Defining the floor profile
FloorProfile = a * FloorArray.^3 + b * FloorArray.^2 + c * FloorArray + d;

% While working on this code will plot this
figure
plot(FloorArray, FloorProfile)
xlim([0, FloorLength])
ylim([0, StaticRRH])
axis equal

%% Doing the airflow stuff 
% Defining the inlet air conditions
Ti = 293.15; % This is in Kelvin so is 20 degrees celcius
Pi = 10^5; % Atmospheric pressure set to 1 bar
R = 287;
gamma = 1.4;
density = Pi / (287 * Ti);
% Will assume density is constant throughout
SoSi = sqrt(gamma * R * Ti);

% Define the car speed which is also inlet air speed
vCar = 250; % This is in kph will convert to m/s
vCar = (vCar * 10^3)/3600;

% Defining the mass flow
mdot = density * vCar * StaticFRH * FloorWidth;

% Finding the air speed at each point
airspeeds = zeros([length(FloorArray), 1]);
airspeeds(1) = vCar;
FloorProfilePrevious = FloorProfile(2:end);
for i = 2:length(FloorArray)
    airspeeds(i) = (FloorProfile(i-1) / FloorProfile(i)) * airspeeds(i-1);
end

airPressures = zeros([length(FloorArray), 1]);
airPressures(1) = Pi;
for i = 2:length(FloorArray)
    airPressures(i) = airPressures(i-1) + 0.5 * density * (airspeeds(i-1)^2 - airspeeds(i)^2) + density * 9.81 * 0.5 * (FloorProfile(i-1) - FloorProfile(i));
end

% Finding the difference between the pressure under the floor and the
% ambient pressure
deltaP = Pi - airPressures;

% Integrating this over the floor area to find the overall downforce
% generated by the floor
Downforce = sum(deltaP * FloorWidth * (FloorArray(2) - FloorArray(1)));

%% Experimenting
% The above is giving downforce values that look vaguely reasonable if a
% bit high, want to now look into creating 3D plots of downforce values
% from various rear ride heights and car speeds, will not be considering
% the angle of the floor for now
% Want to define an array of car speeds and ride heights to test
vCararray = linspace(50, 350, 13)';
Diff2staticarray = linspace(0, -0.075, 16)';

% Creating an empty downforce array
DownforceVals = zeros(length(vCararray), length(Diff2staticarray));

% Running a double for loop to populate the downforce array
for i = 1:length(vCararray)
    for j = 1:length(Diff2staticarray)
        % Start by defining static front and rear ride heights
        StaticRRH = 0.11;
        FloorAngle = 0.25;
        StaticFRH = StaticRRH - FloorLength * sind(FloorAngle);
        
        % Defining the x and y for the low point of the floor
        Xlow = 1.7;
        Ylow = 0.08;

        % Will form a quadratic defining the floor profile
        temp1 = zeros([4, 4]);
        temp2 = zeros([4, 1]);
        
        
        % Lowering the floor here while working on code
        StaticFRH = StaticFRH + Diff2staticarray(j);
        StaticRRH = StaticRRH + Diff2staticarray(j);
        Ylow = Ylow + Diff2staticarray(j);
        
        temp1(1, 4) = 1;
        temp1(2, 1) = FloorLength^3;
        temp1(2, 2) = FloorLength^2;
        temp1(2, 3) = FloorLength;
        temp1(2, 4) = 1;
        temp1(3, 1) = Xlow^3;
        temp1(3, 2) = Xlow^2;
        temp1(3, 3) = Xlow;
        temp1(3, 4) = 1;
        temp1(4, 1) = 3 * Xlow^2;
        temp1(4, 2) = 2 * Xlow;
        temp1(4, 3) = 1;
        
        temp2(1) = StaticFRH;
        temp2(2) = StaticRRH;
        temp2(3) = Ylow;
        temp2(4) = 0;
        
        % Solving
        values = linsolve(temp1, temp2);
        a = values(1);
        b = values(2);
        c = values(3);
        d = values(4);
        
        % Defining the floor profile
        FloorProfile = a * FloorArray.^3 + b * FloorArray.^2 + c * FloorArray + d;

        % Defining the inlet air conditions
        Ti = 293.15; % This is in Kelvin so is 20 degrees celcius
        Pi = 10^5; % Atmospheric pressure set to 1 bar
        R = 287;
        gamma = 1.4;
        density = Pi / (287 * Ti);
        % Will assume density is constant throughout
        SoSi = sqrt(gamma * R * Ti);
        
        % Define the car speed which is also inlet air speed
        vCar = vCararray(i); % This is in kph will convert to m/s
        vCar = (vCar * 10^3)/3600;
        
        % Defining the mass flow
        mdot = density * vCar * StaticFRH * FloorWidth;
        
        % Finding the air speed at each point
        airspeeds = zeros([length(FloorArray), 1]);
        airspeeds(1) = vCar;
        FloorProfilePrevious = FloorProfile(2:end);
        for k = 2:length(FloorArray)
            airspeeds(k) = (FloorProfile(k-1) / FloorProfile(k)) * airspeeds(k-1);
        end
        
        airPressures = zeros([length(FloorArray), 1]);
        airPressures(1) = Pi;
        for l = 2:length(FloorArray)
            airPressures(l) = airPressures(l-1) + 0.5 * density * (airspeeds(l-1)^2 - airspeeds(l)^2) + density * 9.81 * 0.5 * (FloorProfile(l-1) - FloorProfile(l));
        end
        
        % Finding the difference between the pressure under the floor and the
        % ambient pressure
        deltaP = Pi - airPressures;
        
        % Integrating this over the floor area to find the overall downforce
        % generated by the floor
        DownforceVals(i, j) = sum(deltaP * FloorWidth * (FloorArray(2) - FloorArray(1)));
    end
end

% 3d plotting
% Start by convertin diff to rear ride height values
RRHarray = Diff2staticarray + 0.11;
% Create the meshgrid arrays for X and Y values
[vCararraymesh, RRHarraymesh] = meshgrid(RRHarray, vCararray);
figure
colormap(turbo)
surf(RRHarraymesh, vCararraymesh, DownforceVals)
xlabel('vCar (kph)')
ylabel('Rear ride height (m)')
zlabel('Downforce generated (N)')

